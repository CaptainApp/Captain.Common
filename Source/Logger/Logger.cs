using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Captain.Common {
  /// <summary>
  ///   Provides basic logging facilities to applications
  /// </summary>
  public sealed class Logger {
    /// <summary>
    ///   Provides a list of streams where each log message is to be forwarded
    /// </summary>
    public List<Stream> Streams { get; } = new List<Stream>();

    /// <summary>
    ///   Logs an object or message with the specified level
    /// </summary>
    /// <param name="level">Logging level</param>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">Method name to be shown</param>
    /// <param name="filePath">File path</param>
    /// <param name="lineNumber">Line number</param>
    private void WriteLine(
      LogLevel level,
      object obj,
      string methodName,
      string filePath,
      int lineNumber) {
      // format line
      string line =
        $"{Path.GetFileName(filePath)?.Replace(".cs", ""),25}{(lineNumber != 0 ? ':' + lineNumber.ToString() : ""),-4} {methodName,-15} {level.ToString().ToLower(),7}: {obj}" +
        Environment.NewLine;

      // write to console
      Console.ForegroundColor = level.GetAssociatedConsoleColor();
      Console.Write(line);

      // write to the rest of streams
      byte[] bytes = Encoding.UTF8.GetBytes(line);
      foreach (Stream stream in Streams) {
        stream.Write(bytes, 0, bytes.Length);
      }
    }

    /// <summary>
    ///   Logs an object or message with warning level
    /// </summary>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">(Generated by the compiler) Calling method name</param>
    /// <param name="filePath">(Generated by the compiler) Calling file path</param>
    /// <param name="lineNumber">(Generated by the compiler) Calling line number</param>
    public void Error(
      object obj,
      [CallerMemberName] string methodName = "???",
      [CallerFilePath] string filePath = "???",
#if DEBUG
      [CallerLineNumber] int lineNumber = 0
#else
      int lineNumber = 0
#endif
    ) =>
      WriteLine(LogLevel.Error, obj, methodName, filePath, lineNumber);

    /// <summary>
    ///   Logs an object or message with warning level
    /// </summary>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">(Generated by the compiler) Calling method name</param>
    /// <param name="filePath">(Generated by the compiler) Calling file path</param>
    /// <param name="lineNumber">(Generated by the compiler) Calling line number</param>
    public void Warn(
      object obj,
      [CallerMemberName] string methodName = "???",
      [CallerFilePath] string filePath = "???",
#if DEBUG
      [CallerLineNumber] int lineNumber = 0
#else
      int lineNumber = 0
#endif
    ) =>
      WriteLine(LogLevel.Warn, obj, methodName, filePath, lineNumber);

    /// <summary>
    ///   Logs an object or message with informational level
    /// </summary>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">(Generated by the compiler) Calling method name</param>
    /// <param name="filePath">(Generated by the compiler) Calling file path</param>
    /// <param name="lineNumber">(Generated by the compiler) Calling line number</param>
    public void Info(
      object obj,
      [CallerMemberName] string methodName = "???",
      [CallerFilePath] string filePath = "???",
#if DEBUG
      [CallerLineNumber] int lineNumber = 0
#else
      int lineNumber = 0
#endif
    ) =>
      WriteLine(LogLevel.Info, obj, methodName, filePath, lineNumber);

    /// <summary>
    ///   Logs an object or message with debug level
    /// </summary>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">(Generated by the compiler) Calling method name</param>
    /// <param name="filePath">(Generated by the compiler) Calling file path</param>
    /// <param name="lineNumber">(Generated by the compiler) Calling line number</param>
    public void Debug(
      object obj,
      [CallerMemberName] string methodName = "???",
      [CallerFilePath] string filePath = "???",
#if DEBUG
      [CallerLineNumber] int lineNumber = 0
#else
      int lineNumber = 0
#endif
    ) {
#if DEBUG
      WriteLine(LogLevel.Debug, obj, methodName, filePath, lineNumber);
#endif
    }

    /// <summary>
    ///   Logs an object or message with warning level
    /// </summary>
    /// <param name="obj">Object to be logged</param>
    /// <param name="methodName">(Generated by the compiler) Calling method name</param>
    /// <param name="filePath">(Generated by the compiler) Calling file path</param>
    /// <param name="lineNumber">(Generated by the compiler) Calling line number</param>
    public void Trace(
      object obj,
      [CallerMemberName] string methodName = "???",
      [CallerFilePath] string filePath = "???",
#if DEBUG
      [CallerLineNumber] int lineNumber = 0
#else
      int lineNumber = 0
#endif
    ) {
#if DEBUG
      WriteLine(LogLevel.Trace, obj, methodName, filePath, lineNumber);
#endif
    }
  }
}